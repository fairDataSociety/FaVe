// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FaveCreateCollectionHandlerFunc turns a function with the right signature into a fave create collection handler
type FaveCreateCollectionHandlerFunc func(FaveCreateCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FaveCreateCollectionHandlerFunc) Handle(params FaveCreateCollectionParams) middleware.Responder {
	return fn(params)
}

// FaveCreateCollectionHandler interface for that can handle valid fave create collection params
type FaveCreateCollectionHandler interface {
	Handle(FaveCreateCollectionParams) middleware.Responder
}

// NewFaveCreateCollection creates a new http.Handler for the fave create collection operation
func NewFaveCreateCollection(ctx *middleware.Context, handler FaveCreateCollectionHandler) *FaveCreateCollection {
	return &FaveCreateCollection{Context: ctx, Handler: handler}
}

/*
	FaveCreateCollection swagger:route POST /collections faveCreateCollection

Create a new collection.
*/
type FaveCreateCollection struct {
	Context *middleware.Context
	Handler FaveCreateCollectionHandler
}

func (o *FaveCreateCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFaveCreateCollectionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
